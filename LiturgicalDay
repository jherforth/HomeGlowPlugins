<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Liturgical Day Widget</title>
  <link rel="stylesheet" href="/index.css">
  <style>
    body {
      background: transparent;
      color: var(--text-color, #333);
      font-family: 'Inter', sans-serif;
      margin: 0;
      padding: 0.75rem;
      box-sizing: border-box;
      font-size: 0.85rem;
    }

    .widget-container {
      background: var(--card-bg, rgba(255, 255, 255, 0.8));
      border: 1px solid var(--card-border, rgba(255, 255, 255, 0.2));
      box-shadow: var(--shadow, 0 8px 32px rgba(0, 0, 0, 0.1));
      backdrop-filter: var(--backdrop-blur, blur(10px));
      border-radius: 12px;
      padding: 0.5rem;
      text-align: center;
      width: 100%;
      max-height: calc(100vh - 1.5rem);
      overflow-y: auto;
      position: relative;
      transition: all 0.3s ease;
    }

    .widget-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, var(--accent, #6e44ff), var(--accent, #6e44ff));
      border-radius: 12px 12px 0 0;
      opacity: 0.8;
    }

    .widget-header {
      text-align: center;
      margin-bottom: 0.5rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid rgba(var(--text-color-rgb, 51, 51, 51), 0.1);
    }

    .widget-title {
      font-size: 1.2rem;
      font-weight: 700;
      margin: 0;
      color: var(--text-color, #333);
      background: linear-gradient(135deg, var(--accent, #6e44ff), var(--accent, #6e44ff));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .season-info {
      font-size: 0.8rem;
      color: var(--text-color, #333);
      margin-bottom: 0.5rem;
      padding: 0.4rem 0.6rem;
      background: linear-gradient(135deg, rgba(var(--accent-rgb, 110, 68, 255), 0.1), rgba(var(--accent-rgb, 110, 68, 255), 0.05));
      border-radius: 8px;
      text-align: center;
      text-transform: capitalize;
      border: 1px solid rgba(var(--accent-rgb, 110, 68, 255), 0.2);
      animation: fadeInUp 0.6s ease-out 0.2s both;
      position: relative;
      overflow: hidden;
    }

    .season-info::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      animation: shimmer 2s infinite;
    }

    .celebrations {
      margin-top: 0.5rem;
    }

    .celebration {
      margin-bottom: 0.5rem;
      padding: 0.5rem;
      border-radius: 8px;
      background: rgba(var(--text-color-rgb, 51, 51, 51), 0.03);
      border: 1px solid rgba(var(--text-color-rgb, 51, 51, 51), 0.08);
      transition: all 0.3s ease;
      animation: fadeInUp 0.6s ease-out calc(0.4s + var(--delay, 0s)) both;
      position: relative;
      overflow: hidden;
      text-align: center;
    }

    .celebration:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 15px rgba(var(--text-color-rgb, 51, 51, 51), 0.1);
      border-color: rgba(var(--accent-rgb, 110, 68, 255), 0.3);
    }

    .celebration::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 3px;
      background: linear-gradient(180deg, var(--accent, #6e44ff), rgba(var(--accent-rgb, 110, 68, 255), 0.6));
      border-radius: 0 2px 2px 0;
    }

    .celebration-title {
      font-size: 0.9rem;
      font-weight: 600;
      color: var(--text-color, #333);
      margin: 0;
      line-height: 1.3;
      margin-bottom: 0.5rem;
      word-wrap: break-word;
      hyphens: auto;
      text-align: center;
    }

    .celebration-rank {
      font-size: 0.7rem;
      color: var(--text-color, #333);
      opacity: 0.7;
      font-style: italic;
      margin-top: 0.2rem;
      padding: 0.2rem 0.4rem;
      background: rgba(var(--text-color-rgb, 51, 51, 51), 0.05);
      border-radius: 4px;
      display: inline-block;
      margin-bottom: 0.5rem;
    }

    .celebration-colour {
      display: inline-block;
      width: 18px;
      height: 18px;
      border-radius: 50%;
      margin: 0.25rem auto;
      border: 2px solid rgba(var(--text-color-rgb, 51, 51, 51), 0.2);
      box-shadow: 0 1px 4px rgba(0, 0, 0, 0.15);
      transition: all 0.3s ease;
    }

    .celebration-colour:hover {
      transform: scale(1.1);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.25);
    }

    .error-message {
      color: var(--error-color, #dc3545);
      font-weight: 600;
      text-align: center;
      padding: 1.5rem 0.75rem;
      background: rgba(220, 53, 69, 0.1);
      border: 1px solid rgba(220, 53, 69, 0.2);
      border-radius: 8px;
      animation: fadeInUp 0.6s ease-out;
      font-size: 0.8rem;
    }

    .loading {
      text-align: center;
      color: var(--text-color, #333);
      opacity: 0.7;
      padding: 1.5rem 0.75rem;
      font-size: 0.9rem;
      animation: pulse 1.5s ease-in-out infinite;
    }

    .loading::after {
      content: '';
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid var(--accent, #6e44ff);
      border-radius: 50%;
      border-top-color: transparent;
      animation: spin 1s linear infinite;
      margin-left: 0.5rem;
      vertical-align: middle;
    }

    /* Animations */
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(15px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes shimmer {
      0% {
        left: -100%;
      }
      100% {
        left: 100%;
      }
    }

    @keyframes pulse {
      0%, 100% {
        opacity: 0.7;
      }
      50% {
        opacity: 1;
      }
    }

    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }

    /* Dark theme adjustments */
    [data-theme="dark"] .widget-container::before {
      background: linear-gradient(90deg, var(--accent, #00ddeb), var(--accent, #00ddeb));
    }

    [data-theme="dark"] .widget-title {
      background: linear-gradient(135deg, var(--accent, #00ddeb), var(--accent, #00ddeb));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    [data-theme="dark"] .celebration {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.1);
    }

    [data-theme="dark"] .celebration:hover {
      border-color: rgba(var(--accent-rgb, 0, 221, 235), 0.4);
    }

    [data-theme="dark"] .celebration-rank {
      background: rgba(255, 255, 255, 0.08);
    }

    /* Responsive design */
    @media (max-width: 480px) {
      .widget-container {
        padding: 0.4rem;
      }

      .widget-title {
        font-size: 1rem;
      }
    }
  </style>
</head>
<body>
  <div class="widget-container">
    <div class="widget-header">
      <h2 class="widget-title">‚úù Liturgical Day</h2>
    </div>
    <div id="liturgical-content" class="loading">Loading liturgical information...</div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Handle theme and transparency
      const params = new URLSearchParams(window.location.search);
      const theme = params.get('theme');
      if (theme === 'dark' || theme === 'light') {
        document.documentElement.setAttribute('data-theme', theme);
      }
      const isTransparent = params.get('transparent') === 'true';
      if (isTransparent) {
        document.body.style.background = 'transparent';
        const mainContainer = document.querySelector('.widget-container');
        if (mainContainer) {
          mainContainer.style.background = 'transparent';
          mainContainer.style.boxShadow = 'none';
          mainContainer.style.backdropFilter = 'none';
          mainContainer.style.border = 'none';
        }
      }

      // Color mapping for liturgical colors
      const colorMap = {
        'green': '#228B22',
        'red': '#DC143C',
        'white': '#FFFFFF',
        'violet': '#8A2BE2',
        'purple': '#800080',
        'rose': '#FF69B4',
        'gold': '#FFD700',
        'black': '#2F2F2F'
      };

      // Load liturgical data
      loadLiturgicalData();

      async function loadLiturgicalData() {
        const contentElement = document.getElementById('liturgical-content');

        try {
          const liturgicalUrl = 'http://calapi.inadiutorium.cz/api/v0/en/calendars/default/today';
          const proxyUrl = `/api/proxy?targetUrl=${encodeURIComponent(liturgicalUrl)}`;

          const response = await fetch(proxyUrl);

          if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }

          const data = await response.json();

          let html = '';

          // Celebrations
          if (data.celebrations && Array.isArray(data.celebrations) && data.celebrations.length > 0) {
            html += '<div class="celebrations">';

            data.celebrations.forEach((celebration, index) => {
              html += `<div class="celebration" style="--delay: ${index * 0.1}s;">`;

              if (celebration.title) {
                // Parse and wrap the title for better formatting
                let formattedTitle = celebration.title;

                // Split long titles at common break points
                formattedTitle = formattedTitle
                  .replace(/,\s+/g, '<br>')  // Break at commas
                  .replace(/\s+in\s+Ordinary\s+Time/g, '<br>in Ordinary Time')  // Break before "in Ordinary Time"
                  .replace(/\s+(ferial|memorial|feast|solemnity)$/g, '<br>$1')  // Break before rank words at end
                  .replace(/\s+(optional\s+memorial|obligatory\s+memorial)$/g, '<br>$1')  // Break before memorial types
                  .replace(/,\s*(priest|bishop|martyr|virgin|doctor|hermit|religious|widow)/g, '<br>$1')  // Break before titles
                  .replace(/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday),?\s*/g, '$1<br>');  // Break after day names

                html += `<div class="celebration-title">${formattedTitle}</div>`;

                // Add color indicator if available
                if (celebration.colour) {
                  const colorValue = colorMap[celebration.colour.toLowerCase()] || celebration.colour;
                  html += `<span class="celebration-colour" style="background-color: ${colorValue};" title="Liturgical color: ${celebration.colour}"></span>`;
                }
              }

              if (celebration.rank) {
                html += `<div class="celebration-rank">${celebration.rank}</div>`;
              }

              html += '</div>';
            });
          }

          html += '</div>';

          contentElement.innerHTML = html || '<div class="error-message">No liturgical information available for today.</div>';

        } catch (error) {
          contentElement.innerHTML = `
            <div class="error-message">
              Failed to load liturgical information.<br>
              <small>Error: ${error.message}</small>
            </div>
          `;
        }
      }
    });
  </script>
</body>
</html>
